{
    "openapi": "3.0.3",
    "info": {
        "title": "Loono API",
        "description": "Loono API for the mobile application. The whole API is JSON based.\n\nFailed API operations return [Error](https://okarmazin.stoplight.io/docs/loono/c2NoOjI2ODI2OA-error-response).\n\nGeneral error codes:\n|HTTP Status|code |description|\n|--- |--- | --- |\n|400|MISSING_PRIMARY_EMAIL| The Firebase login method did not include user email. Email is required and must be saved in Firebase before any API access. |\n|400|MISSING_USER_NAME| The Firebase login method did not include user name. Name is required and must be saved in Firebase before any API access. |",
        "contact": {
            "name": "Loono",
            "url": "https://www.loono.cz/"
        },
        "license": {
            "name": "MIT license",
            "url": "http://www.opensource.org/licenses/mit-license.html"
        },
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://loono.ceskodigital.net:443",
            "description": "Inferred Url"
        }
    ],
    "tags": [
        {
            "name": "Account"
        },
        {
            "name": "Leaderboard"
        },
        {
            "name": "Onboarding",
            "externalDocs": {
                "url": "https://docs.google.com/document/d/1btjnZTfRJ5VQMvmTMv4Za5UCf8qBC2jo6tXKNjPMqVc/edit"
            }
        },
        {
            "name": "Examinations"
        }
    ],
    "paths": {
        "/account": {
            "summary": "Retrieve Account information of the current user.",
            "description": "Contains all the information needed to display the root Account (TODO name) screen. This isncludes",
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "GET Account",
                "operationId": "getAccount",
                "description": "GET the account information of the current user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Account Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ],
                "parameters": []
            }
        },
        "/leaderboard": {
            "get": {
                "summary": "[Draft] Get Leaderboard",
                "tags": [
                    "Leaderboard"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Leaderboard"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "operationId": "getLeaderboard",
                "description": "TODO: This is a mock.\n\nReturns the leaderboard rendering.",
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ]
            }
        },
        "/account/user/update": {
            "post": {
                "summary": "Update Account User",
                "operationId": "updateAccountUser",
                "responses": {
                    "200": {
                        "description": "Returns the updated Account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "description": "Change the auxiliary account information. Successful operation returns the whole updated **Account**\n\n**ALL FIELDS ARE ALWAYS UPDATED. BEWARE OF DEFAULT PARAMETERS**",
                "tags": [
                    "Account"
                ],
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    }
                }
            },
            "parameters": []
        },
        "/account/settings/update": {
            "post": {
                "summary": "Update Account Settings",
                "operationId": "updateAccountSettings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "description": "Change the settings. Successful operation returns the whole updated **Account**\n\n**ALL FIELDS ARE ALWAYS UPDATED. BEWARE OF DEFAULT PARAMETERS**",
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Settings"
                            }
                        }
                    },
                    "description": "The whole new settings object. "
                },
                "tags": [
                    "Account"
                ]
            }
        },
        "/account/delete": {
            "post": {
                "summary": "[Draft] Delete Account",
                "operationId": "deleteAccount",
                "responses": {
                    "200": {
                        "description": "Account successfully Deleted. Returns an empty JSON object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden, likely needs a more recent recent login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Account"
                ],
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ],
                "description": "Deletes the user account and all associated data. This action is irreversible.\n\n\nIf it is necessary to keep certain pieces of information, for instance to comply with legal requirements, that data is anonymized to the maximum possible extent.\n\nSpecific error codes:\n\n|HTTP Status| code |description|\n|--- |--- | --- |\n|403|RECENT_LOGIN_REQUIRED| User must reauthenticate. Equivalent to the [FirebaseAuthRecentLoginRequiredException](https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuthRecentLoginRequiredException)(Android) |",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "description": "Empty object"
                }
            }
        },
        "/examinations": {
            "get": {
                "summary": "Get Examination Records",
                "tags": [
                    "Examinations"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExaminationRecord"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "operationId": "getExaminations",
                "description": "Returns the examination records of the current user.",
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ]
            }
        },
        "/examinations/{type}/complete": {
            "post": {
                "summary": "Complete Examination",
                "operationId": "completeExamination",
                "responses": {
                    "200": {
                        "description": "Returns the updated list of examination records.\n\nTODO: Co vracet?  Account? All the records? Just the one record?",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExaminationRecord"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Examinations"
                ],
                "description": "Notify the API that an examination has been performed.\n\nThe date of the completion must not be in the future.",
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExaminationCompletion"
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "type",
                    "in": "path",
                    "required": true,
                    "description": "One of the `ExaminationTypeEnum` values"
                }
            ]
        },
        "/examinations/reset": {
            "post": {
                "summary": "[Draft] Reset Examination Record",
                "operationId": "deleteExamination",
                "responses": {
                    "201": {
                        "description": "Returns the updated list of examination records.\n\nTODO: Co vracet?  Account? All the records? Just the one record?",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExaminationRecord"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Examinations",
                    "Account"
                ],
                "description": "Delete the aggregate examination record for this examination type.\n\nSpecial consideration: How to prevent abuse and point cheating? SOME information about the history of point entitlement will have to be retained so that people don't spam create/delete to farm points.",
                "security": [
                    {
                        "Bearer_Auth": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    },
                    "description": "Empty object"
                }
            },
            "parameters": []
        }
    },
    "components": {
        "schemas": {
            "Account": {
                "type": "object",
                "title": "Account",
                "description": "Account information of the current user. Includes the user profile, account settings and points.",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "settings": {
                        "$ref": "#/components/schemas/Settings"
                    },
                    "points": {
                        "type": "integer",
                        "description": "The total amount of points earned by the user from gamification features.",
                        "format": "int32",
                        "minimum": 0
                    }
                },
                "required": [
                    "user",
                    "settings",
                    "points"
                ],
                "readOnly": true
            },
            "Error": {
                "title": "Error response",
                "description": "When an API operation fails, API returns this error which may contain a specific error code pertaining to the failed operation.\n\nAll fields are optional and nullable.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Machine readable error code. Error codes are defined by the individual API operations. Error code may be used by the client application for UX tailoring.",
                        "type": "string",
                        "nullable": true
                    },
                    "message": {
                        "description": "Human readable error message. These messages are only rarely shown to users and are more often used as a debugging tool for API clients. ",
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ExaminationCompletion": {
                "title": "ExaminationCompletion",
                "type": "object",
                "description": "A completed medical examination.\n\n`month` and `year` are optional and nullable. If any of them is missing or `null`, API defaults to `LocalDate.now()` - the current year and month.",
                "properties": {
                    "month": {
                        "type": "integer",
                        "description": "",
                        "format": "int32",
                        "default": null,
                        "nullable": true
                    },
                    "year": {
                        "type": "integer",
                        "description": "Must not be in the future",
                        "format": "int32",
                        "default": null,
                        "nullable": true
                    }
                }
            },
            "User": {
                "title": "User",
                "description": "Encapsulates basic user profile information: `uid, email, name` etc.\n\nReturned as part of Account.",
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "unique user identifier"
                    },
                    "email": {
                        "type": "string",
                        "description": "The primary registration email."
                    },
                    "nickname": {
                        "type": "string",
                        "description": ""
                    },
                    "sex": {
                        "$ref": "#/components/schemas/Sex"
                    },
                    "birthdateMonth": {
                        "type": "integer",
                        "description": "birthdate month of user",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 12
                    },
                    "birthdateYear": {
                        "type": "integer",
                        "description": "birthdate year of user",
                        "format": "int32"
                    },
                    "preferredEmail": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "required": [
                    "uid",
                    "email",
                    "nickname"
                ]
            },
            "LeaderboardUser": {
                "title": "Leaderboard user",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User nickname. Anonymized if the user opted in to leaderboard anonymization.",
                        "readOnly": true
                    },
                    "profileImageUrl": {
                        "type": "string",
                        "description": "Profile image of the user.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "points": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0,
                        "readOnly": true
                    },
                    "isThisMe": {
                        "type": "boolean",
                        "description": "If `true`, this is the profile of the current user. Not required, default `false`",
                        "readOnly": true
                    }
                },
                "required": [
                    "name",
                    "points"
                ]
            },
            "Leaderboard": {
                "title": "Leaderboard",
                "description": "Rendered leaderboard from the POV of the authenticated user. Contains the top profiles and peers.",
                "type": "object",
                "properties": {
                    "top": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LeaderboardUser"
                        }
                    },
                    "peers": {
                        "description": "The users immediately adjacent to the authenticated user. One of the items is the current user.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LeaderboardUser"
                        }
                    }
                }
            },
            "UserPatch": {
                "type": "object",
                "title": "UserPatch",
                "description": "All fields are always updated, so beware of defaults.",
                "properties": {
                    "sex": {
                        "$ref": "#/components/schemas/Sex"
                    },
                    "birthdateMonth": {
                        "type": "integer",
                        "description": "birthdate month of user",
                        "format": "int32",
                        "nullable": true,
                        "writeOnly": true
                    },
                    "birthdateYear": {
                        "type": "integer",
                        "description": "birthdate year of user",
                        "format": "int32",
                        "nullable": true,
                        "writeOnly": true
                    },
                    "preferredEmail": {
                        "type": "string",
                        "format": "email",
                        "nullable": true,
                        "writeOnly": true
                    }
                },
                "writeOnly": true
            },
            "Sex": {
                "type": "string",
                "title": "Sex",
                "description": "Sex enum",
                "enum": [
                    "MALE",
                    "FEMALE"
                ]
            },
            "ExaminationTypeEnum": {
                "type": "string",
                "title": "ExaminationTypeEnum",
                "description": "",
                "enum": [
                    "BREAST_SELF",
                    "COLONOSCOPY",
                    "DENTIST",
                    "DERMATOLOGIST",
                    "GENERAL_PRACTITIONER",
                    "GYNECOLOGIST",
                    "MAMMOGRAM",
                    "OPHTHALMOLOGIST",
                    "TESTICULAR_SELF",
                    "TOKS",
                    "ULTRASOUND_BREAST",
                    "UROLOGIST",
                    "VENEREAL_DISEASES"
                ]
            },
            "PreferredEmail": {
                "type": "string",
                "title": "PreferredEmail",
                "description": "Users can choose to have their communication email address be different from their main Firebase account email.\n\noptional and nullable\n",
                "format": "email",
                "nullable": true
            },
            "ExaminationRecord": {
                "type": "object",
                "title": "ExaminationRecord",
                "description": "An aggregate record of a single examination type.",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ExaminationTypeEnum"
                    },
                    "worth": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "How many points will be awarded upon completing this examination if the user is eligible."
                    },
                    "streak": {
                        "$ref": "#/components/schemas/Streak"
                    },
                    "lastVisitYear": {
                        "type": "integer",
                        "format": "date"
                    },
                    "lastVisitMonth": {
                        "type": "integer"
                    }
                },
                "required": [
                    "type",
                    "worth"
                ],
                "readOnly": true
            },
            "Streak": {
                "title": "Streak",
                "type": "object",
                "description": "Examination completion streak.",
                "properties": {
                    "currentStreak": {
                        "type": "integer",
                        "minimum": 0,
                        "format": "int32"
                    },
                    "downtimeRemainingDays": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                    },
                    "gracePeriodRemainingDays": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                    }
                }
            },
            "Appointment": {
                "title": "Appointment",
                "type": "object",
                "description": "A planned visit to the doctor.",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "provider": {
                        "$ref": "#/components/schemas/SimpleHealthcareProvider"
                    },
                    "datetime": {
                        "type": "string",
                        "description": "**ZONED** Datetime.\nTODO: Can be split into separate datetime + timezene fields\n"
                    }
                }
            },
            "SimpleHealthcareProvider": {
                "title": "SimpleHealthcareProvider",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "description": "Simplified healthcare provider record."
            },
            "Settings": {
                "title": "Settings",
                "type": "object",
                "description": "Account Settings",
                "properties": {
                    "leaderboardAnonymizationOptIn": {
                        "type": "boolean",
                        "default": true
                    },
                    "appointmentReminderEmailsOptIn": {
                        "type": "boolean",
                        "description": "",
                        "default": false
                    },
                    "newsletterOptIn": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "required": [
                    "leaderboardAnonymizationOptIn",
                    "appointmentReminderEmailsOptIn",
                    "newsletterOptIn"
                ]
            }
        },
        "securitySchemes": {
            "Bearer_Auth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}